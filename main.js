/**
 * IMMORTAL-CORD: Central Execution Engine
 * main.js - Core bootloader and scheduler control point
 * 
 * This file serves as the entry point for the IMMORTAL-CORD system.
 * It initializes all components, loads environment variables,
 * and schedules recurring tasks.
 */

// Import required modules
require('dotenv').config();
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');

// Import internal modules
const vault = require('./vault');
const logger = require('./logger');
const clickupManager = require('./clickup-manager');
const scheduler = require('./scheduler');

// Constants
const LOG_DIR = path.join(__dirname, 'logs');
const VAULT_DIR = path.join(__dirname, 'vault');

// Ensure directories exist
[LOG_DIR, VAULT_DIR].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

/**
 * Initialize the system
 */
async function initSystem() {
  try {
    logger.info('IMMORTAL-CORD System Initializing...');
    
    // Load environment variables through vault
    const envStatus = await vault.loadEnvironment();
    logger.info(`Environment loaded: ${envStatus.loaded ? 'SUCCESS' : 'FAILED'}`);
    
    if (!envStatus.loaded) {
      logger.error('Failed to load environment variables. Check .env file.');
      process.exit(1);
    }
    
    // Verify API connections
    logger.info('Verifying API connections...');
    const apiStatus = await vault.verifyConnections();
    
    // Generate initial status report
    await generateStatusReport(apiStatus);
    
    // Initialize scheduler
    scheduler.initScheduler();
    
    logger.info('IMMORTAL-CORD System Initialized Successfully');
    logger.info('Starting initial scan cycle...');
    
    // Run initial scan
    await runFullScanCycle();
    
    // Schedule recurring tasks
    setupRecurringTasks();
    
  } catch (error) {
    logger.error(`System initialization failed: ${error.message}`);
    logger.error(error.stack);
    process.exit(1);
  }
}

/**
 * Run a full scan cycle
 */
async function runFullScanCycle() {
  try {
    logger.info('Starting full scan cycle...');
    
    // Step 1: Scan Google Drive
    const driveFiles = await driveManager.scanAndTagFiles();
    logger.info(`Drive scan complete. Found ${driveFiles.length} files.`);
    
    // Step 2: Mirror to ClickUp
    const clickupTasks = await clickupManager.mirrorFilesToClickUp(driveFiles);
    logger.info(`ClickUp mirroring complete. Created/updated ${clickupTasks.length} tasks.`);
    
    // Step 3: Update status report
    await generateStatusReport();
    
    logger.info('Full scan cycle completed successfully.');
    
    return {
      success: true,
      driveFiles,
      clickupTasks
    };
  } catch (error) {
    logger.error(`Full scan cycle failed: ${error.message}`);
    logger.error(error.stack);
    
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Generate status report
 */
async function generateStatusReport(apiStatus = null) {
  try {
    // If apiStatus is not provided, check connections
    if (!apiStatus) {
      apiStatus = await vault.verifyConnections();
    }
    
    const timestamp = new Date().toISOString();
    const statusFilePath = path.join(__dirname, 'IMMORTAL_STACK_STATUS.md');
    
    // Generate status content
    const statusContent = `# IMMORTAL STACK STATUS REPORT
Generated: ${new Date().toLocaleString()}

## API Connection Status

| Service | Status | Details |
|---------|--------|---------|
| Google Drive | ${apiStatus.drive.status ? '✅' : '❌'} | ${apiStatus.drive.message} |
| ClickUp | ${apiStatus.clickup.status ? '✅' : '❌'} | ${apiStatus.clickup.message} |
| Stripe | ${apiStatus.stripe ? (apiStatus.stripe.status ? '✅' : '❌') : '⚠️ Not Configured'} | ${apiStatus.stripe ? apiStatus.stripe.message : 'API key not provided'} |
| Render | ${apiStatus.render ? (apiStatus.render.status ? '✅' : '❌') : '⚠️ Not Configured'} | ${apiStatus.render ? apiStatus.render.message : 'API key not provided'} |

## System Status

* **System Initialization**: ✅ Complete
* **Scheduler**: ✅ Active
* **Last Full Scan**: ${timestamp}
* **Next Scheduled Scan**: ${scheduler.getNextScheduledRun()}

## File Statistics

* **Drive Files Tracked**: ${await driveManager.getFileCount() || 'Pending first scan'}
* **ClickUp Tasks Mirrored**: ${await clickupManager.getTaskCount() || 'Pending first scan'}
* **Log Entries**: ${await logger.getLogCount() || '0'}

## Recent Activity

${await logger.getRecentLogs(5) || 'No recent activity'}

---

*This report is automatically generated by the IMMORTAL-CORD system.*
*Last updated: ${timestamp}*
`;

    // Write status to file
    fs.writeFileSync(statusFilePath, statusContent);
    logger.info('Status report generated successfully.');
    
    return statusFilePath;
  } catch (error) {
    logger.error(`Failed to generate status report: ${error.message}`);
    logger.error(error.stack);
    return null;
  }
}

/**
 * Setup recurring tasks
 */
function setupRecurringTasks() {
  // Run full scan every 6 hours
  cron.schedule('0 */6 * * *', async () => {
    logger.info('Scheduled full scan triggered');
    await runFullScanCycle();
  });
  
  // Generate status report every hour
  cron.schedule('0 * * * *', async () => {
    logger.info('Scheduled status report generation triggered');
    await generateStatusReport();
  });
  
  // Daily log rotation at midnight
  cron.schedule('0 0 * * *', () => {
    logger.info('Daily log rotation triggered');
    logger.rotateLog();
  });
  
  logger.info('Recurring tasks scheduled successfully');
}

// Start the system
initSystem().catch(error => {
  console.error('Fatal error during system initialization:');
  console.error(error);
  process.exit(1);
});

// Export functions for testing and external use
module.exports = {
  runFullScanCycle,
  generateStatusReport
};
